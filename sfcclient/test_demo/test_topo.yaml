#
# About:
#
#   A HOT template for testing OpenStack networking-sfc extension
#
# Topo:
#
#   Public Net: [ public ]
#       |
#       |
#   { Router }
#       |
#       |
#   Private Net: [ net/subnet ]
#       |
#       |
#   1. Linear without Port Pair Group
#
#   src --- chn1 --- chn2 ---chn3 --- dst
#
#   2. With Port Pair Group for Load Blancing
#
#           ------
#           |chn2|
#   src --- |chn1| --- chn3 --- dst
#           ------
#
# Note:
#
#   FloatingIP are not officially supported

heat_template_version: 2017-02-24  # stable/ocata

description: >
  Test networking-sfc extension and sfcclient

parameters:

  image_name:
    type: string
    label: image name

  flavor_name:
    type: string
    label: instance flavor name

  key_name:
    type: string
    label: SSH key pair name

  pub_net:
    type: string
    label: public network
    description: >
      ID or name of public network for which floating IP addresses will be allocated

  pvt_net_name:
    type: string
    label: Private Network Name

  pvt_subnet_name:
    type: string
    label: Private Subnetwork Name

  pvt_subnet_cidr:
    type: string
    label: CIDR for subnet

  pvt_subnet_gw:
    type: string
    label: Gateway for subnet

  pvt_subnet_dns:
    type: comma_delimited_list
    label: DNS servers

resources:

  # --- Network ----

  pvt_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name: { get_param: pvt_net_name }
      port_security_enabled: False
      shared: True

  pvt_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: pvt_subnet_name }
      network_id: { get_resource: pvt_net }
      cidr: { get_param: pvt_subnet_cidr }
      gateway_ip: { get_param: pvt_subnet_gw }
      dns_nameservers: { get_param: pvt_subnet_dns }

  # --- Ports ----

  src_pt:
    type: OS::Neutron::Port
    properties:
      name: src_pt
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  dst_pt:
    type: OS::Neutron::Port
    properties:
      name: dst_pt
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn1_pt:
    type: OS::Neutron::Port
    properties:
      name: chn1_pt
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  # Ingress and egress ports for chaining

  chn1_pt_in:
    type: OS::Neutron::Port
    properties:
      name: chn1_pt_in
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn1_pt_out:
    type: OS::Neutron::Port
    properties:
      name: chn1_pt_out
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn2_pt:
    type: OS::Neutron::Port
    properties:
      name: chn2_pt
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn2_pt_in:
    type: OS::Neutron::Port
    properties:
      name: chn2_pt_in
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn2_pt_out:
    type: OS::Neutron::Port
    properties:
      name: chn2_pt_out
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn3_pt:
    type: OS::Neutron::Port
    properties:
      name: chn3_pt
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn3_pt_in:
    type: OS::Neutron::Port
    properties:
      name: chn3_pt_in
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  chn3_pt_out:
    type: OS::Neutron::Port
    properties:
      name: chn3_pt_out
      network_id: { get_resource: pvt_net }
      fixed_ips:
        - subnet_id: { get_resource: pvt_subnet }

  # --- Router ---

  dft_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: public }

  subnet1_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: dft_router }
      subnet: { get_resource: pvt_subnet }

  # --- Floating IP ---

  src_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_resource: src_pt }

  dst_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_resource: dst_pt }

  chn1_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_resource: chn1_pt }

  chn2_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_resource: chn2_pt }

  chn3_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: pub_net }
      port_id: { get_resource: chn3_pt }

  # --- Instance ----

  src:
    type: OS::Nova::Server
    properties:
      name: src
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
        - port: { get_resource:  src_pt }

  dst:
    type: OS::Nova::Server
    properties:
      name: dst
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
        - port: { get_resource: dst_pt }

  ### Service Function VMs ###
  ch1:
    type: OS::Nova::Server
    properties:
      name: ch1
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
        - port: { get_resource: chn1_pt }
        - port: { get_resource: chn1_pt_in }
        - port: { get_resource: chn1_pt_out }

  ch2:
    type: OS::Nova::Server
    properties:
      name: ch2
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
        - port: { get_resource: chn2_pt }
        - port: { get_resource: chn2_pt_in }
        - port: { get_resource: chn2_pt_out }

  ch3:
    type: OS::Nova::Server
    properties:
      name: ch3
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
        - port: { get_resource: chn3_pt }
        - port: { get_resource: chn3_pt_in }
        - port: { get_resource: chn3_pt_out }
